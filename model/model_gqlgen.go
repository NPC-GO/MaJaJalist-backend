// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Config struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ConfigInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type LoginInput struct {
	UsernameOrEmail string `json:"usernameOrEmail"`
	PassWord        string `json:"passWord"`
	RecaptchaToken  string `json:"recaptchaToken"`
}

type Level string

const (
	LevelAdmin      Level = "Admin"
	LevelUser       Level = "User"
	LevelRestricted Level = "Restricted"
)

var AllLevel = []Level{
	LevelAdmin,
	LevelUser,
	LevelRestricted,
}

func (e Level) IsValid() bool {
	switch e {
	case LevelAdmin, LevelUser, LevelRestricted:
		return true
	}
	return false
}

func (e Level) String() string {
	return string(e)
}

func (e *Level) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Level(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

func (e Level) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
